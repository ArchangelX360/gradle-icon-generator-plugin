import com.github.javaparser.ast.Modifier
import com.github.javaparser.ast.Modifier.createModifierList
import java.nio.file.Files
import kotlin.math.roundToInt
import kotlin.random.Random

buildscript {
    dependencies {
        classpath("com.github.javaparser:javaparser-symbol-solver-core:3.17.0")
    }
}

plugins {
    id("se.dorne.icon-generator") version "0.0.1"
    id("java")
}

generateIconsForSources {
    sources.setFrom(
        project.layout.projectDirectory.dir("src")
    )
}

// --- GENERATION OF SOURCES TASKS ---

tasks.register<DefaultTask>("generateIntelliJIDEACommunityLikeRepository") {
    group = "generation"
    description = "generate a large amount of Java classes that contains Base64 icons"

    val sourceFilecConfiguration = SourceFileGenerationConfiguration(
        numberOfSources = 54, // IntelliJ IDEA has 54 compatible sources *Icons.java
        maxPackageDepth = 2,
        maxFieldPerClass = 5,
        packageReusePercentage = 95.0,
        nestedClassPercentage = 50.0,
    )

    val junkConfiguration = JunkConfiguration(
        numberOfFiles = 231023, // IntelliJ IDEA has 231023 files that are not *Icons.java
        numberOfJunkOnlyDirectories = 27,// IntelliJ IDEA has 27 folders that are not containing *Icons.java files
        junkFileInRestOfProjectPercentage = 0.1, // 0.1% of the junkfiles will land in some directory that contains *Icons.java sources
    )

    doLast {
        sourceFilecConfiguration.generateSources()
        junkConfiguration.generateJunk()
    }
}


tasks.register<DefaultTask>("generateLargeRepository") {
    group = "generation"
    description = "generate a repository with a large amount of Java classes that contains Base64 icons, and few junk"

    val sourceFilecConfiguration = SourceFileGenerationConfiguration(
        numberOfSources = 2000,
        maxPackageDepth = 2,
        maxFieldPerClass = 5,
        packageReusePercentage = 97.0,
        nestedClassPercentage = 50.0,
    )

    val junkConfiguration = JunkConfiguration(
        numberOfFiles = 100,
        numberOfJunkOnlyDirectories = 2,
        junkFileInRestOfProjectPercentage = 2.0, // 2% of the junkfiles will land in some directory that contains *Icons.java sources
    )

    doLast {
        sourceFilecConfiguration.generateSources()
        junkConfiguration.generateJunk()
    }
}

tasks.register("cleanSources") {
    group = "generation"
    description = "cleans up the sources generated by a generation task"

    doLast {
        delete(project.layout.projectDirectory.dir("src"))
    }
}

data class SourceFileGenerationConfiguration(
    val numberOfSources: Int,
    val maxPackageDepth: Int,
    val maxFieldPerClass: Int,
    val packageReusePercentage: Double,
    val nestedClassPercentage: Double,
) {
    fun generateSources() {
        val availablePackageNames = mutableSetOf<String>()
        repeat(numberOfSources) {
            try {
                val content = com.github.javaparser.ast.CompilationUnit()

                val packageName =
                    if (availablePackageNames.isNotEmpty() && packageReusePercentage >= Random.nextInt(1, 101)) {
                        availablePackageNames.asSequence().shuffled().first()
                    } else {
                        (1..Random.nextInt(1, maxPackageDepth)).joinToString(".") {
                            generatePackagePiece(Random.nextInt(1, 10))
                        }
                    }
                availablePackageNames.add(packageName)
                content.setPackageDeclaration(packageName)

                val c = generateRandomClass(generateRandomIconClassName(), maxFieldPerClass, Modifier.Keyword.PUBLIC)
                content.addType(c)

                if (nestedClassPercentage >= Random.nextInt(1, 101)) {
                    val nested =
                        generateRandomClass(generateRandomIconClassName(), maxFieldPerClass, Modifier.Keyword.PUBLIC)
                    c.addMember(nested)
                }

                content.save("${project.projectDir}/src/main/java/${c.fullyQualifiedName.get().replace(".", "/")}.java")
            } catch (e: Exception) {
                // if the random generation created some weird artefact like keywords or incorrect Java, we just discard the file generation
                logger.warn("file generation failed: $e")
            }
        }
        println(
            """
            Source file generation:
              - generated $numberOfSources ".java" source files
              - re-used package names ${packageReusePercentage}% of the time
        """.trimIndent()
        )
    }
}

data class JunkConfiguration(
    val numberOfFiles: Int,
    val numberOfJunkOnlyDirectories: Int,
    val junkFileInRestOfProjectPercentage: Double,
) {
    fun generateJunk() {
        val numberOfJunkFilesInSourceDirectories =
            (numberOfFiles * junkFileInRestOfProjectPercentage / 100).roundToInt()
        val numberOfJunkFilesInJunkFilesDirectoryOnly = numberOfFiles - numberOfJunkFilesInSourceDirectories
        val junkFilePerDirectory = numberOfJunkFilesInJunkFilesDirectoryOnly / numberOfJunkOnlyDirectories
        (1..numberOfJunkOnlyDirectories)
            .map {
                val junkDir = File("${project.projectDir}/src/zz-junk-only-${it}")
                Files.createDirectories(junkDir.toPath())
                junkDir
            }.forEach { junkDir ->
                repeat(junkFilePerDirectory) {
                    val filename = "${junkDir}/${generateRandomJunkFilename()}"
                    File(filename).writeText("some junk file")
                }
            }

        val directories = File("${project.projectDir}/src")
            .walkTopDown()
            .filter { it.isDirectory }
            .filter { !it.endsWith("src") && !it.endsWith("src/main") && !it.endsWith("src/main/java") }
            .toList()
        repeat(numberOfJunkFilesInSourceDirectories) {
            val nextSourceDirectory = directories[it % directories.size]
            val filename = "${nextSourceDirectory}/${generateRandomJunkFilename()}"
            File(filename).writeText("some junk file")
        }
        println(
            """
            Junk generation:
              - $numberOfJunkFilesInJunkFilesDirectoryOnly junk files added in junk files directory only (represents some non-java modules for example)
              - $numberOfJunkFilesInSourceDirectories junk files added in source directories (represents some non-Icons.java files, or resources files)
            """.trimIndent()
        )
    }
}

fun com.github.javaparser.ast.CompilationUnit.save(filename: String) {
    val f = File(filename)
    Files.createDirectories(f.toPath().parent)
    f.writeText(this.toString())
}

fun generateRandomClass(
    name: String,
    maxFieldPerClass: Int,
    vararg modifiers: Modifier.Keyword
): com.github.javaparser.ast.body.ClassOrInterfaceDeclaration {
    val c = com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(
        createModifierList(*modifiers),
        false,
        name,
    )
    repeat(Random.nextInt(1, maxFieldPerClass)) {
        c.addRandomField()
    }
    return c
}

fun generateRandomClassName(length: Int = 10) = generateRandomName(length, ('a'..'z') + ('A'..'Z')).capitalize()
fun generateRandomIconClassName(length: Int = 10) =
    generateRandomName(length, ('a'..'z') + ('A'..'Z')).capitalize() + "Icons"

fun generateFieldName(length: Int = 10) = generateRandomName(length, ('a'..'z') + ('A'..'Z')).decapitalize()
fun generatePackagePiece(length: Int = 10) = generateRandomName(length, ('a'..'z').toList())
fun generateRandomJunkFilename(length: Int = 20) =
    generateRandomName(length, ('a'..'z') + ('A'..'Z') + ('0'..'9')) + ".junkfile"

fun generateRandomName(length: Int, charPool: List<Char>) =
    (1..length)
        .map { Random.nextInt(0, charPool.size) }
        .map { charPool[it] }
        .joinToString("")

fun com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.addRandomField() {
    val base64ImagePool = listOf(
        "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+gvaeTAAAA00lEQVRIid2VQQ6CMBREn67cu1DP44p4GpceQrmEcgITD4AmhCMYV0LkFuLCkqDW+n/LRiZpQun8md+hDdBHLIASqJWjACKJQeEh3ozru9jAYlBLunDgRXMYKPYTNoNjgF4aUPtHOOF/ij4i6ucp8sEemANjCVmb+0rbTaoQP5iaERADFXADNuZdZ4iBO7ADEvO87tKgAratecJzJ9aPLL0Hy1bNFLi05mdg9q0baf4Tw88dnCzkojW1Tr4tolJo4I0I2V+tgZNni0gLdURa5I617AFFsIiyIhK7jwAAAABJRU5ErkJggg==",
        "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAABmJLR0QA/wD/AP+gvaeTAAABgUlEQVRIie3VwUsVURTH8Y8iD6LCwJBoWVALd67b6ipo5y7BjX9BILgKCnotFF25E7R1f0CLiBLbCLqXCESfSpTgQiIpn4s7D6/DzJgzo6v3g8vMnHPu+c6Zc+8duuqqWL1Ywep1g0fRxv5lJ/ZWBE8m1/WUvYG32EULzcRWi+7hWKj4VcrXTOzxaNYFno6SPkv5djPAe3WBN6Okj1O+Vga4FQdU6fHv6P49HkbP7zLilyuwzukJ/jmr6BdGEl9D6GnLFSwuWHD+c/7FVJ2APPXL7ueSChV+xRruXhD3PAPcxmxZ8EaSYAMDOTHD+J4D/lkW/AiHBfBxHOVA29gqC4axKNFMYmtgsQDYGa+rgGEe284qnrsAeJy8ZN//Aj7hG17iQWTviaBPcVIA/Yihy1b2JUpwgs+YwO3Efx8/coDbQltKqU/4ze2kkh4Jx91KBvAP3uBmWWisG3ghbIeiXn4QVn7tuiUcf50t1Rn7wla6cg0KK/tAOJvvXAe0q65K6xQUUJy8Buv0igAAAABJRU5ErkJggg==",
        "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABmJLR0QA/wD/AP+gvaeTAAAB7ElEQVRoge2ZP07DMBTGf62glDsA1+gCJ+A0ICG2im50hIGtXATKkAASI12pEEdgpFWrMjgRlmmc+E9sQfNJT8qz47zvU+zn5wQaNGhQBbvAAJgCC2BlaDPgCmiHJg6C/KMBWZ2NiCBi4IF4VBFTKfgZsG04ProIec53LMZHfxNyUNfxozV+7SJ8CmgBN0rbLTWL8CkAIojwLQACi6hDAAQUUZcACCTCVUBZGm5Tc3ZyFSBvhOdEEOEq4EJ5holduxDP4SrApRicuRDP4SoAoAv0gTfMy3EtWhWCq/k7BCrHjHLA8AmdgAPgQWmzXYymJmOccTHGOCDhMrsvIqmbXzPs6v86MAd21nXoBMRYvMYcXBbxE5CW+PI0SKX2BJFau8ALYp/wjrJcrPYV+bklWfsk8y8zWwGvlhy08CVARQ+xmcnWs+SgRVUBRSlQbvsCjqW+odQ3dOAQdCNzKUWsA27EFCrz1Sy0bhFPLDmwpVNQgrxE1vmHChmAT+AZcU4AOEK8BSv8+Y1M9wbm/JQSwReggnlRhy4LpZq+0EjKb/mNfUQVGLsSvQP2ikhuxIlsKV2HKK/lGMvCuzJUEfAhXZ9Qr4gOcCr57z4e6vJdx9X6PgT4/MlnYinivOAFLt91TGyRxej7JN+gwX/GNxvACQbtwmKlAAAAAElFTkSuQmCC",
        "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+gvaeTAAAAeElEQVRIiWNgGAVDHXTQ2oL/tLbkP60t+c9AY0tghv+G0g34FB9FcxEpOJwYS8g1/D9UfwiSJViDC1kxuQDDEiYKDUQHjEjs7+iSlAZRKJLr67HZfpgCC4iKZHIAScmUEgtwBgu1LKCJ4TALaGY4AwMNwnwUUB8AAGoAZWQIwMYBAAAAAElFTkSuQmCC",
        "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAAdElEQVQ4jc2SMQ6AIBAER5/gH/yMX7Lk4mstjNpQYQOBEDnRRrYhGcJwyR60mAXYgDlhLjvVWGDI2CuBA05AErZ6Xj3BBOwF+WMEOADzVfB/8jHVBvoKYaddlgSWWGP6c/UejMQaw6O7BSsKLLHGIBDPG8sFMJIiG6lj6G4AAAAASUVORK5CYII=",
        "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABmJLR0QA/wD/AP+gvaeTAAAEXElEQVRoge2ZXYhVVRiGn+PfVIONNtnoZOiADYGhpSSDIogVQeCg4V8iSoTlEDJ0UYaIQwlKgzcKKih4Id0EqaFRSUQ6oFOao8mMmmERNUU5ln/l+Hf04jvb86199t5rrXP2zHgxL2zY7PV+73rXPmt/61vrQD/6URIyKWqNBmYBdcAzQBVQCdwBLgG/AaeBQ8AXwC8p9l00Mojpb4AsYtblyiIDWQAM7HXXOTwHtMYY9LlOAS/0pvEBwCrgZsjIDeBLYAUwFRgJDM7xq4ApwFvAHqCbwoFsAR7safNDgI9DHf8PNAPVHjqVwIfAfyGtVuDRFP0aGAR8Furwa2BsCZqjKHwhHcgAU8f2UEfNpPMBZoCVwC2l/S1QloL2PSzBNL86TfEc5gK3Mb+JVFANXFbC2xxixiDZJSn7XAPeD8WtVO1ZYGbp9mGnEj0JPOAQsyPBuL7+iYjV30QHksWKxpPkf9Yskh5tGI5kJpcBfBIR/0QofkEpA9ishHY7xrytYo6F2iaQX7GzwMQYjXVKo8XPch6DgS4lNM0hJgOcUTHLQu27VNuuBJ1K4Dr5gdb4GA/wvOrsnGPMTBVzEShXbRMx3/4Ei9ZepfVmHCnpA5mu7vdZOguwXN3vRFbaAGvIV7+7kYSQhK9ivDhDr7rzHPijkHooiBmv2vTcD5chTTF6UxXve3/7ksICgacd+KsV/2CorZFC88HVFaNXpTh/e3oHJEcHAsMt3IHAr4r/aqi9BtnMRA1gU4xmmeJ0+9s3K0Xb4lWvuOeJr2OeBa4qbksCd5Di3fAxHuCKEhhq4X5O4ZvtBtYqzuNAp2o/CzySoDlUcf/1ty+pMxAYZ+FeJHp6XMm1lyOLWvD8AlBr0axR/J/iSElptFPdj49lCTYSPU/P5fr4CJiUe3YTqTzPWjT14hW7DiUNQOdp2yrchGwHM5ildiuwHpitnjUghwA21Kn74w78ArxC/idsx/0IRq8fBzCnVLNH/0dU3IsecfdQjlkLzXKIySBZKOp72IN7aVyn4v5E6rKi0KSE2hyEaok2fwyzLkrCAOCwiv3A27VCJeZubL2Fv5RC878jKdQV76nYLmCYn+VCLFOCt4GXErhbMc1fBSZ79PUy5nnT60X4jcSnSvQScvYZhROYg53j0cckzMVzb7FmozAC+FmJdyIb9zB0+fGuh/4Y4A8V2wFUlOA3Ek8hK6guBcKnceuQEnmDh251TivQ/Ysid2AumI4chwSd/YjsA4rFY5hl+zXcDg5KQj3mxqUdmWK+GJGL1RVnfUoerZiDOYgf8DuUHYZZ3N0CFqbs0Yq5mCnvBG6HshXAUUzzi3rIoxXzMQfRRvLurQL4DjPVLu5hj1YsxTyUbQUejuCVIzuwgJcF3uglj1a8hjmIQ5i7uIeQElqbX859hgbMo5MWJJ/XIKcU2nxDH3m0YgX2fyvf6TN3jmjEnE76g23sQ19emAHsR0rxy8i/lzP61FE/+hGNu+hn25UO9GtIAAAAAElFTkSuQmCC",
        "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABmJLR0QA/wD/AP+gvaeTAAACAklEQVRoge2YPUvDQBiAnxYXUcGqu1S7Se2vsCg4+jvcdbIWP1YXt/4AlQqu/oCqIC5uioOLUJCiOEitNA6X0Jhemku8XILkgZeS8vbyvLk3d2kgIyMjQyPjwC7wBHzZnzX7+9RTAG4ASxItUl5EAbhFLu9ELTG7AFTkLeAxKcFRqMpbQDchR1/CyKduBsLKW8BOIqYSosjfkJJVaBr/pdIv7oDZJGS9ZPJxsA98ek7cBY6AvJ0Tpedv7d/FSg74GCHRQFzBVMo77DE8A+7opFleRg44Jpy0u+dnzCsPE6WI1Mg7hCnCqHwFqAPXwAvQA9r28SGw5ModAx5GiBvt+RJwHiBjAX3gAigiVqFUyK8Bbwry7vj2HD96jjsYaps1iUzYaCDayTsjDQabXSyUCH/lZTNRtMfLS4pwxydiX9GGSs+rxIVrzKAiPnTJVxA3pI4C+vxenfKIZ6WuJ0/rDNQ1yTtxoEtMlWtN4k5cmdUXm1SQ1BYwAWwr5LbN6g/3pywm7dwphdzYXon4rcOvCr/dRBSxqZCrMp5WdN8DrbhE/WbgUvN5dI8XyDJ694GyWX1BM4KsLE5Mizss8vdnoQ6DZ6FEWEX8aYki3wOq5pWHqRL+7cI7sJ6ErB8LwBnBN3YfOMVg2+RC5peBDWAFmAfmEJvUM2KpbAL3OgUzMjL+OT+dHzNNm9YKggAAAABJRU5ErkJggg==",
        "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+gvaeTAAAAtklEQVRIie2UMRKCMBBFH4yNo8ehtKAUb+Nl7DwGtXcRj2AtFmycBSKwIYwWvJktMpu8n8lkFlb+iRNQAfXMqoDCFxBD7uruC3DNubQ8aQThIKEBB6AE9pZD355oB2RqnQNP2Xs2eLyNLXATYd6RX/G/gCkgFVEt4jG5OQAgAS6qPyQPCtAhY/LgAEQ85de1PJsJBxwvw94P+kaPzg1CC5qx06OgmSEx5tDRSROVugiLz6KV3/MGRE96J77NbmwAAAAASUVORK5CYII=",
    )

    val modifiers = mutableListOf(
        Modifier.Keyword.PUBLIC,
        Modifier.Keyword.FINAL
    )
    if (Random.nextBoolean()) {
        modifiers.add(Modifier.Keyword.STATIC)
    }
    val field = this.addField(
        "String",
        generateFieldName(),
        *modifiers.toTypedArray(),
    )
    field.variables.first.get().setInitializer("\"${base64ImagePool[Random.nextInt(0, base64ImagePool.size)]}\"")
}
